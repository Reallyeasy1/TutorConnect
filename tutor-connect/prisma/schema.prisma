generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Client {
  id                       Int                        @id @default(autoincrement())
  email                    String                     @unique
  password                 String
  name                     String
  contactNumber            Int
  address                  String
  unitNumber               String?
  postalCode               Int
  assignments              Assignment[]
  active                   Boolean                    @default(false)
  activateClientToken      ActivateClientToken[]
  passwordResetClientToken PasswordResetClientToken[]
  image                    String?
  reviews                  Review[]                   @relation("ClientReviews")
  ClientNotification       ClientNotification[]
  TutorNotification        TutorNotification[]
}

model Assignment {
  id                 Int                  @id @default(autoincrement())
  subject            String
  level              String
  client             Client               @relation(fields: [clientId], references: [id])
  clientId           Int
  tutor              Tutor?               @relation(name: "PrimaryTutor", fields: [tutorId], references: [id])
  tutorId            Int?
  additionalDetails  String?
  postDate           DateTime
  taken              Boolean
  address            String
  unitNumber         String?
  postalCode         Int
  minRate            Int
  maxRate            Int
  duration           String
  frequency          String
  typeOfTutor        String[]
  gender             String
  race               String[]
  availability       String
  avail_tutors       Tutor[]              @relation(name: "AvailableTutors")
  coordinates        Decimal[]
  ClientNotification ClientNotification[]
  TutorNotification  TutorNotification[]
  isPaid             Boolean              @default(false)
  startDate          String?
  amount             Int?
  isRequest          Boolean              @default(false)
}

model Tutor {
  id                      Int                       @id @default(autoincrement())
  email                   String                    @unique
  password                String
  name                    String
  contactNumber           Int
  dateOfBirth             DateTime
  gender                  String
  age                     Int
  nationality             String
  race                    String
  levelAndSubjects        Json
  location                String[]
  typeOfTutor             String
  yearsOfExperience       Int
  highestEducationLevel   String
  assignmentsPrimary      Assignment[]              @relation(name: "PrimaryTutor")
  assignmentsAvailable    Assignment[]              @relation(name: "AvailableTutors")
  active                  Boolean                   @default(false)
  image                   String?
  introduction            String?
  summary                 String?
  studentsResults         String?
  activateTutorToken      ActivateTutorToken[]
  passwordResetTutorToken PasswordResetTutorToken[]
  reviews                 Review[]                  @relation("TutorReviews")
  ClientNotification      ClientNotification[]
  TutorNotification       TutorNotification[]
}

model ClientNotification {
  id           Int         @id @default(autoincrement())
  read         Boolean     @default(false)
  client       Client      @relation(fields: [clientId], references: [id])
  clientId     Int
  date         DateTime    @default(now())
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  assignmentId Int?
  tutor        Tutor?      @relation(fields: [tutorId], references: [id])
  tutorId      Int?
  type         String
}

model TutorNotification {
  id           Int         @id @default(autoincrement())
  read         Boolean     @default(false)
  tutor        Tutor       @relation(fields: [tutorId], references: [id])
  tutorId      Int
  date         DateTime    @default(now())
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  assignmentId Int?
  client       Client?     @relation(fields: [clientId], references: [id])
  clientId     Int?
  type         String
}

model Review {
  id        Int      @id @default(autoincrement())
  tutor     Tutor    @relation(fields: [tutorId], references: [id], name: "TutorReviews", onDelete: Cascade)
  tutorId   Int
  review    String
  rating    Int
  clientId  Int
  client    Client   @relation(fields: [clientId], references: [id], name: "ClientReviews", onDelete: Cascade)
  createdAt DateTime @default(now())
}

model ActivateTutorToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  tutor       Tutor     @relation(fields: [tutorId], references: [id])
  tutorId     Int
}

model PasswordResetTutorToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?
  tutor     Tutor     @relation(fields: [tutorId], references: [id])
  tutorId   Int
}

model ActivateClientToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  client      Client    @relation(fields: [clientId], references: [id])
  clientId    Int
}

model PasswordResetClientToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?
  client    Client    @relation(fields: [clientId], references: [id])
  clientId  Int
}

//generator erd {
//  provider = "prisma-erd-generator"
//}
